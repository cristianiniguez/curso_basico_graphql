"Valida los tipos de nivel"
enum Level {
  principiante
  intermedio
  avanzado
}

type Course {
  _id: ID!
  title: String!
  teacher: String
  description: String!
  topic: String
  people: [Student]
  level: Level
}

interface Person {
  _id: ID!
  name: String!
  email: String!
}

type Student implements Person {
  _id: ID!
  name: String!
  email: String!
  avatar: String
}

type Monitor implements Person {
  _id: ID!
  name: String!
  email: String!
  phone: String
}

type Query {
  "Retorna todos los cursos"
  getCourses: [Course]
  "Retorna un curso"
  getCourse(_id: ID!): Course
  "Retorna todos los estudiantes"
  getPeople: [Person]
  "Retorna un estudiante"
  getPerson(_id: ID!): Person
}

input CourseCreateInput {
  title: String!
  teacher: String
  description: String!
  topic: String
  level: Level
}

input CourseUpdateInput {
  title: String
  teacher: String
  description: String
  topic: String
  level: Level
}

input PersonCreateInput {
  name: String!
  email: String!
  phone: String
  avatar: String
}

input PersonUpdateInput {
  name: String
  email: String
  phone: String
  avatar: String
}

type Mutation {
  "Crea un curso"
  createCourse(input: CourseCreateInput!): Course
  "Edita un curso"
  updateCourse(_id: ID!, input: CourseUpdateInput): Course
  "Elimina un curso"
  deleteCourse(_id: ID!): ID
  "Crea un estudiante"
  createPerson(input: PersonCreateInput!): Person
  "Edita un estudiante"
  updatePerson(_id: ID!, input: PersonUpdateInput): Person
  "Elimina un estudiante"
  deletePerson(_id: ID!): ID
  "Agrega una persone a un curso"
  addPeople(courseID: ID!, personID: ID!): Course
}
